CREATE TABLE EMPLOYEES(
EMPLOYEE_ID INTEGER PRIMARY KEY,
FIRST_NAME VARCHAR2(50),
LAST_NAME VARCHAR2(50),
USER_ID INTEGER);

CREATE TABLE CUSTOMERS(
CUSTOMER_ID INTEGER PRIMARY KEY,
FIRST_NAME VARCHAR2(50),
LAST_NAME VARCHAR2(50),
ADDRESS_ID INTEGER,
USER_ID INTEGER,
CAR_ID INTEGER DEFAULT NULL);

CREATE TABLE CARS(
CAR_ID INTEGER PRIMARY KEY,
MAKE VARCHAR2(50),
CAR_MODEL VARCHAR2 (50),
CAR_YEAR INTEGER,
IS_OWNED VARCHAR2 (50),
CAR_VALUE INTEGER);

CREATE TABLE DEALER_USERS(
USER_ID INTEGER PRIMARY KEY,
USER_NAME VARCHAR2 (50),
DEALER_PASSWORD VARCHAR2 (50),
EMP_STATUS VARCHAR2 (50));

CREATE TABLE ADDRESSES(
ADDRESS_ID INTEGER PRIMARY KEY,
STREET_NAME VARCHAR2 (50),
CITY VARCHAR2 (50),
ZIP INTEGER);

CREATE TABLE OFFERS (
OFFER_ID INTEGER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
OFFER INTEGER,
CAR_ID INTEGER);
--================================--
--==========ALTER TABLES==========--
--================================--

ALTER TABLE DEALER_USERS
ADD CONSTRAINT UQ_USER_NAME
UNIQUE (USER_NAME);

-----FOREIGN KEYS-----
--CUSTOMER TABLE--
ALTER TABLE CUSTOMERS
ADD CONSTRAINT FK_ADDRESS_ID
FOREIGN KEY (ADDRESS_ID) REFERENCES ADDRESSES (ADDRESS_ID);

ALTER TABLE CUSTOMERS
ADD CONSTRAINT FK_USER_ID
FOREIGN KEY (USER_ID) REFERENCES DEALER_USERS (USER_ID);

ALTER TABLE CUSTOMERS
ADD CONSTRAINT FK_CAR_ID
FOREIGN KEY (CAR_ID) REFERENCES CARS (CAR_ID);

ALTER TABLE CUSTOMERS
ADD OFFER_ID INTEGER;

--EMPLOYEE TABLE--
ALTER TABLE EMPLOYEES
ADD CONSTRAINT FK_EMP_USER_ID
FOREIGN KEY (USER_ID) REFERENCES DEALER_USERS (USER_ID);

--OFFERS TABLE--
ALTER TABLE OFFERS
ADD CONSTRAINT FK_CAR_ID
FOREIGN KEY (CAR_ID) REFERENCES CARS (CAR_ID);

--CARS TABLE --
ALTER TABLE CARS
ADD CUSTOMER_ID INTEGER;

ALTER TABLE CARS 
ADD CONSTRAINT FK_CUST_ID
FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMERS (CUSTOMER_ID);

ALTER TABLE CUSTOMERS
DROP CONSTRAINT FK_CUST_CAR_ID;

ALTER TABLE CUSTOMERS
ADD CONSTRAINT FK_OFFER_ID
FOREIGN KEY (OFFER_ID) REFERENCES OFFERS (OFFER_ID) ON DELETE CASCADE;
--================================--
--==========SEQUENCES=============--
--================================--

CREATE SEQUENCE employee_sequence;
CREATE SEQUENCE customer_sequence;
CREATE SEQUENCE user_sequence
START WITH 100
MAXVALUE 1000
INCREMENT BY 1;
CREATE SEQUENCE car_sequence;
CREATE SEQUENCE address_sequence;

--================================--
--==========TRIGGERS=============--
--================================--
DROP TRIGGER EMPLOYEE_ON_INSERT;
DROP TRIGGER CUSTOMER_ON_INSERT;
DROP TRIGGER CAR_ON_INSERT;
DROP TRIGGER USER_ON_INSERT;
DROP TRIGGER ADDRESS_ON_INSERT;

CREATE OR REPLACE TRIGGER employee_on_insert
BEFORE INSERT ON EMPLOYEES
FOR EACH ROW
BEGIN
SELECT employee_sequence.nextval
INTO :new.EMPLOYEE_ID
FROM dual;
END;
/

DROP TRIGGER customer_on_insert;
CREATE OR REPLACE TRIGGER customer_on_insert
BEFORE INSERT ON CUSTOMERS
FOR EACH ROW
BEGIN
SELECT customer_sequence.nextval
INTO :new.CUSTOMER_ID
FROM dual;
END;
/

CREATE OR REPLACE TRIGGER car_on_insert
BEFORE INSERT ON CARS
FOR EACH ROW
BEGIN
SELECT car_sequence.nextval
INTO :new.CAR_ID
FROM dual;
END;
/
DROP TRIGGER users_on_insert;
CREATE OR REPLACE TRIGGER users_on_insert
BEFORE INSERT ON DEALER_USERS
FOR EACH ROW
BEGIN
SELECT user_sequence.nextval
INTO :new.USER_ID
FROM dual;
END;
/
CREATE OR REPLACE TRIGGER address_on_insert
BEFORE INSERT ON ADDRESSES
FOR EACH ROW
BEGIN
SELECT address_sequence.nextval
INTO :new.ADDRESS_ID
FROM dual;
END;
/
CREATE OR REPLACE TRIGGER offers_on_insert
AFTER UPDATE ON OFFERS
FOR EACH ROW
BEGIN
SELECT address_sequence.nextval
INTO :new.ADDRESS_ID
FROM dual;
END;
/


--================================--
--========STORE PROCEDURES========--
--================================--

CREATE OR REPLACE PROCEDURE CUSTPRO 
(FIRST_NAME IN VARCHAR2, LAST_NAME IN VARCHAR2, USER_NAME IN VARCHAR2, DEALER_PASSWORD IN VARCHAR2, STREET_NAME IN VARCHAR2, CITY IN VARCHAR2, ZIP IN INTEGER)
AS
BEGIN 
INSERT INTO ADDRESSES VALUES(address_sequence.nextval, STREET_NAME, CITY, ZIP);
INSERT INTO DEALER_USERS VALUES(user_sequence.nextval, USER_NAME, DEALER_PASSWORD, 'NO');
INSERT INTO CUSTOMERS VALUES(customer_sequence.nextval, FIRST_NAME, LAST_NAME, address_sequence.CURRVAL, user_sequence.CURRVAL, NULL,NULL);
COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE EMPPRO 
(FIRST_NAME IN VARCHAR2, LAST_NAME IN VARCHAR2, USER_NAME IN VARCHAR2, DEALER_PASSWORD IN VARCHAR2)
AS
BEGIN 
INSERT INTO DEALER_USERS VALUES(user_sequence.nextval, USER_NAME, DEALER_PASSWORD, 'YES');
INSERT INTO EMPLOYEES VALUES(employee_sequence.nextval, FIRST_NAME, LAST_NAME, user_sequence.CURRVAL);
COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE ACCEPT_OFFER_PRO 
(STATUS IN VARCHAR2, CUSTOMER IN INTEGER, CAR IN INTEGER)
AS
BEGIN 
UPDATE OFFERS SET OFFER_STATUS = STATUS  WHERE CUSTOMER_ID = CUSTOMER AND CAR_ID = CAR;
UPDATE CARS SET CUSTOMER_ID = CUSTOMER WHERE CAR_ID = CAR;
DELETE FROM OFFERS WHERE OFFER_STATUS = 'PENDING' AND CAR_ID = CAR AND NOT CUSTOMER_ID = CUSTOMER ;
COMMIT;
END;
/




UPDATE CUSTOMERS SET CAR_ID = 3 WHERE USER_ID = 124;
EXECUTE CUSTPRO('MICHAEL', 'JACKSON', 'kingOfPop', 'pepsi', '123 Neverland', 'KANSAS', '43712');

SELECT * FROM CARS WHERE CUSTOMER_ID = 124;

UPDATE CARS SET CUSTOMER_ID = 4 WHERE CAR_ID = 2;

ALTER TABLE OFFERS
ADD OFFER_STATUS VARCHAR(20) DEFAULT 'PENDING';
